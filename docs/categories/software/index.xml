<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Josh Padnick</title>
    <link>https://JoshPadnick.com/categories/software/</link>
    <description>Recent content in Software on Josh Padnick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Sep 2016 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://JoshPadnick.com/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My Talk on New AWS Services</title>
      <link>https://JoshPadnick.com/2016/09/my-talk-on-new-aws-services/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2016/09/my-talk-on-new-aws-services/</guid>
      <description>I recently gave a talk to the AWS Phoenix Meetup on three new services and updates from AWS: the Application Load Balancer (ALB), EC2 Container Service (ECS), and Kinesis Analytics.
More than half the software teams I meet today run Docker in production, so there was high interest in how you can use the ALB with an ECS cluster to have a more streamlined docker cluster setup.
Some important details I since learned that are worth mentioning:
 The ALB’s costs scale with use. For example, if you have 1,000,000 idle web socket connections, you’ll pay $2,000/month! But presumably if you have 1,000,000 active users that kind of cost is ok. Thanks to nivertech on Hacker News for pointing this out. The ALB currently has a bug that impacts its ability to do zero-downtime deployments. Special credit to my colleague Yevgeniy Brikman for discovering and reporting this!  Check out the presentation on the Gruntwork Blog!</description>
    </item>
    
    <item>
      <title>My Thoughts from DockerCon 2016</title>
      <link>https://JoshPadnick.com/2016/06/my-thoughts-from-dockercon-2016/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2016/06/my-thoughts-from-dockercon-2016/</guid>
      <description>&lt;p&gt;I just finished attending &lt;a href=&#34;http://2016.dockercon.com/&#34;&gt;DockerCon 2016&lt;/a&gt;, and overall it was a pretty useful conference! I like to summarize what I learned both for my own mental clarity, and so others can benefit. So here we go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Many Different Ways Can You Deploy a Production Container Cluster?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I love Docker as a format for deploying things, but oh my gosh, how many different options are there for deploying it?&lt;/p&gt;

&lt;p&gt;If you’re looking for “Heroku for Containers”, Docker has a pretty nice offering called Docker Cloud that seems really good. But once you’re ready to manage your own infrastructure, well, there was a long list to consider.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Gruntwork</title>
      <link>https://JoshPadnick.com/2016/05/introducing-gruntwork/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2016/05/introducing-gruntwork/</guid>
      <description>In November 2014, I started helping software teams ramp up on Amazon Web Services and DevOps. This was gratifying work because a few years prior, I was involved in a project that did a terrible job of DevOps and suffered greatly for it. Now I was helping other teams avoid that same fate.
And what an adventure it turned out to be! I got the chance to work with Intel, Infusionsoft, 3-person startups, a well-funded Spotify competitor and so many other interesting companies doing interesting things. I called the consulting practice Phoenix DevOps because, well, I live in Phoenix, Arizona, and it turns out the concept of immutability (sometimes known as “Phoenix Servers”) is a central tenet of DevOps.
Along the way, I wrote A Comprehensive Guide to Building Scalable Web Apps on AWS, Part 1, and gave lots of DevOps presentations at various meetups and conferences.
During that time I also discovered the outstanding Blog of Yevgeniy Brikman (“Jim”). Jim mentioned one day he was looking for DevOps people and I loved his work, so I messaged him: “Hey, I do DevOps for lots of teams and have no time right now but let’s talk!”
It turned out Jim was doing consulting very similar to what I was doing through his own consulting practice, Atomic Squirrel. And after many conversations and trial projects, we decided we really liked working with each other.
As we compared all our experiences, we realized we’d basically been doing the same thing for every client. Setup a best-practices VPC, automate deployment, setup monitoring/metrics, get ramped up on AWS, etc.
Doing consulting on an hourly basis was one paradigm for helping clients solve these problems, but what if we could solve the problems really well one time and then consult with clients merely to help them adopt what was already built? That would mean we could significantly lower the cost and time needed to get your DevOps on.
Well, that’s what we’ve decided to do! And so today, it is my pleasure to announce that I am officially winding down Phoenix DevOps and joining with Yevgeniy Brikman in a new company we call Gruntwork.
Why call it Gruntwork? Because that’s what this work is for almost every software team. Whatever app you want to build, the infrastructure stands between your vision and your app; almost no one gets excited about automating their infrastructure. Not to mention that it’s hard to find DevOps engineers, they’re often expensive, and they hold all the keys to your kingdom. And when they leave, then what?
So Gruntwork is here to do your grunt work for you, and because of the way we’ve set things up, and the thousands of hours of collective experience we have, we can help you achieve a result that’s more effective and less expensive than the most amazing DevOps person you could hire.
One other aspect of Gruntwork that’s important to Jim and me is that Gruntwork has to be able to completely disappear and you should still be ok to run your infrastructure. Would I base my important project’s entire infrastructure on a new company that was just started by a couple of guys? Only if I had complete control of the source code and could run it without them.
So, unlike most businesses which strive to build lock-in to your product, we are actively striving to build “not lock-in”. It’s actually kind of hard to do sometimes, but it means that customers can choose to come back to us not because the cost of switching is so painful but because we continue to actively provide them value.
There’s more to share in the Gruntwork story, but I think that’s enough for now and we’ll announce more when we’re ready. In the meantime, I am thrilled to be working with Jim, who’s been a fantastic business partner so far, and I am thrilled to embark on this new adventure!
Thanks for reading. Now time to get some Gruntwork done…</description>
    </item>
    
    <item>
      <title>Play Framework &#43; Docker &#43; CircleCI &#43; AWS &#43; EC2 Container Service</title>
      <link>https://JoshPadnick.com/2015/11/play-framework-docker-circleci-aws-ec2-container-service/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2015/11/play-framework-docker-circleci-aws-ec2-container-service/</guid>
      <description>I was invited to speak earlier tonight at the Phoenix Java User’s Group on Play Framework, DevOps, and AWS.
I decided to do a basic walkthrough of Play Framework, and to build a continuous deployment pipeline live as part of the presentation. I wanted to actually implement something so that (a) I would be forced to pick specific technologies I could talk about, and (b) I could talk about the real-world challenges of implementing something.
I created 4 public GitHub repos to implement this:
 https://github.com/PhoenixDevOps/phxjug-ctr-base https://github.com/PhoenixDevOps/phxjug-ctr-base-play https://github.com/PhoenixDevOps/phxjug-play-framework-demo https://github.com/PhoenixDevOps/phxjug-ecs-cluster  Check out slide 36 for some directions on how to use all these items together, although I recognize the overall documentation may not be suitable for beginners since the presentation itself filled in the gaps in the slides. Enjoy!
 </description>
    </item>
    
    <item>
      <title>My Talk on Choosing the Right Framework for Running Docker Containers in Production</title>
      <link>https://JoshPadnick.com/2015/09/my-talk-on-choosing-the-right-framework-for-running-docker-containers-in-production/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2015/09/my-talk-on-choosing-the-right-framework-for-running-docker-containers-in-production/</guid>
      <description>I spoke today at Iterate.PHX, a DevOps conference put on right here in Phoenix, AZ.
My topic was on choosing the right framework for running docker containers in production. I specifically focus on the “multi-container VM” paradigm since if you’re OK to just run a single container per VM, then you don’t really need a framework at all. In that case, Docker is really just your deployment artifact.
The slides are below, and if there’s a video of the talk I’ll add that here as well. Enjoy!
 </description>
    </item>
    
    <item>
      <title>A Common Pattern in Successful Companies</title>
      <link>https://JoshPadnick.com/2015/06/a-common-pattern-in-successful-companies/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2015/06/a-common-pattern-in-successful-companies/</guid>
      <description>&lt;p&gt;I’ve been helping software teams accelerate and succeed with DevOps and Amazon Web Services for a few months now (See &lt;a href=&#34;http://phoenixdevops.com/&#34;&gt;Phoenix DevOps&lt;/a&gt;), and one of the more rewarding parts of the job is getting to observe how multiple different companies operate.&lt;/p&gt;

&lt;p&gt;I’ve seen high-performing teams in companies that are about to IPO, software teams in Fortune 100 companies, startups of about 10 engineers, and software-based companies of no engineers at all! It’s been incredibly enlightening for me to learn about how people organize themselves to get sh*t done.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Simple Tool for Snapshotting Your EC2 Instances</title>
      <link>https://JoshPadnick.com/2015/06/a-simple-tool-for-snapshotting-your-ec2-instances/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2015/06/a-simple-tool-for-snapshotting-your-ec2-instances/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wrote a simple tool that makes it easy to create an AMI of your EC2 instance, and then to delete all AMI’s older than X days/hours/minutes with a single command. Check it out at &lt;a href=&#34;https://github.com/josh-padnick/ec2-snapper&#34;&gt;https://github.com/josh-padnick/ec2-snapper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This works especially well for backing up WordPress blogs hosted on a single instance in AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many ways to do backups in AWS. One of them is creating an Amazon Machine Image (AMI) of your EC2 Instance so that you have a moment-in-time backup which you can use to launch a new EC2 instance in minutes.&lt;/p&gt;

&lt;p&gt;It’s not the world’s most robust backup method. First, in order to guarantee that your file system is consistent at the moment of your snapshot, you have to agree to reboot your instance. Second, if you’re backing up data where even a few minutes of data loss is a big deal, this solution isn’t for you.&lt;/p&gt;

&lt;p&gt;But sometimes it’s actually the best solution.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Comprehensive Guide to Scaling Web &amp; Mobile Apps on AWS – Part 1</title>
      <link>https://JoshPadnick.com/2015/03/a-comprehensive-guide-to-scaling-web-mobile-apps-on-aws-part-1/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2015/03/a-comprehensive-guide-to-scaling-web-mobile-apps-on-aws-part-1/</guid>
      <description>I published a 12,000+ word guide in January on AirPair.com on building scalable apps on Amazon Web Services. I’ve been a longtime Hacker News reader so it was gratifying to see the article get 500+ upvotes on Hacker News! It also attracted about 30,000 readers in the first 24 hours of publication.
Part 2 of the article is brewing right now, mostly in the form of gaining the real-world experience necessary to write a thorough and helpful guide.
Read the Article on AirPair.com
Update/December 25, 2016 : AirPair.com has been down for a few days now, so if you’d like a copy of the article just email me and I’ll send you a PDF.
Regarding Part 2, I have all the knowledge and experience to write it, but I’ve been busy getting our new “DevOps as a Service” company Gruntwork up and running. I’d like to make it a Q1-2017 goal to publish Part 2, and will report back here once I’ve formally committed to that. Thank you for all your interest!
Update/January 6, 2017: Looks like AirPair is back online, so you can view the article there now!</description>
    </item>
    
    <item>
      <title>What I Learned Teaching Programming to 14-Year Olds</title>
      <link>https://JoshPadnick.com/2014/11/what-i-learned-teaching-programming-to-14-year-olds/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2014/11/what-i-learned-teaching-programming-to-14-year-olds/</guid>
      <description>&lt;p&gt;Yesterday I volunteered at &lt;a href=&#34;https://codeday.org/phoenix&#34;&gt;CodeDay Phoenix&lt;/a&gt; as a mentor.  The goal of the event was to take young kids (mostly middle school and early high school) and give them an opportunity to code something in 24 hours.&lt;/p&gt;

&lt;p&gt;As a mentor, my job was to “walk around and help where I could.”&lt;/p&gt;

&lt;p&gt;The first group I walked up to was creating a tool to help you come up with something to do for the day.  The idea was that it would take your current location, your preference on whether you wanted to eat, play, build, or socialize for that day, look up some locations in a local database and then make a suggested schedule. It was actually kind of a cool concept!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Developer Fundamentals</title>
      <link>https://JoshPadnick.com/2014/10/aws-developer-fundamentals/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2014/10/aws-developer-fundamentals/</guid>
      <description>My second presentation at Desert Code Camp 2014.2 was on Amazon Web Services.
It was exciting to see standing room only during the talk! My main concern was keeping it interesting. The natural temptation for this kind of presentation is to do a “documentation summary” but that risks afflicting the audience with severe boredom. So I used a lot of visuals and everyday analogies in explaining AWS.
I spoke both about the big picture, and then went into detail on two of the most popular AWS services, EC2 and S3. I also briefly described VPC, IAM, RDS, DynamoDB, Glacier, and SES. I received numerous positive comments on the talk, so I’m pleased post the slides below.
 </description>
    </item>
    
    <item>
      <title>Introduction to EmberJS</title>
      <link>https://JoshPadnick.com/2014/10/introduction-to-emberjs/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2014/10/introduction-to-emberjs/</guid>
      <description>I gave two presentations at Desert Code Camp 2014.2 earlier today. The first was an intro to EmberJS.
Ember is known for its steep initial learning curve and it was an interesting challenge trying to pack in so many concepts in 60 minutes. I had a great time preparing for, and giving the talk.
 </description>
    </item>
    
    <item>
      <title>Ally Bank. I Hardly Knew Ye.</title>
      <link>https://JoshPadnick.com/2014/09/ally-bank.-i-hardly-knew-ye./</link>
      <pubDate>Wed, 10 Sep 2014 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2014/09/ally-bank.-i-hardly-knew-ye./</guid>
      <description>&lt;p&gt;This is my review of my first couple of weeks with Ally Bank, and why I ultimately decided to stay with stodgy, old Chase.&lt;/p&gt;









&lt;figure style=&#34;padding: 0.25rem; margin: 2rem 0;&#34;&gt;
    &lt;img style=&#34;max-width: 100%; height: auto;&#34; src=&#34;https://JoshPadnick.com/2014/09/ally-bank.-i-hardly-knew-ye./images/ALLY_Bank_withRegistration_hu951708bdb2349ed215365de7a1437f71_7344_400x500_fit_q75_box.jpg&#34; width=&#34;300&#34; height=&#34;123&#34;&gt;
    &lt;figcaption&gt;
        &lt;small&gt;
            
        &lt;/small&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When I was 16 years old, I went with my Mom to a local Bank One branch to open my own personal checking account. Bank One eventually got acquired by Chase, and so I’ve effectively been a Chase customer for more than half my life!&lt;/p&gt;

&lt;p&gt;But it’s been a love-hate relationship. On the positive side, it seems that no matter where in the United States I am, I’m always less than 3 miles from a Chase branch, so it’s definitely convenient. I also don’t worry about Chase failing so it seems like a safe place to keep my family’s money. Their iPhone app is actually pretty good, especially the ability to remotely deposit checks.&lt;/p&gt;

&lt;p&gt;But on the downside, I often get a “big bank” feel from them, mostly owing to the fact that I don’t really have a personal relationship with anyone there. I find I’m usually just engaging the “Chase Infrastructure” rather than contacting a specific person I know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The User Interface of the Violin</title>
      <link>https://JoshPadnick.com/2014/08/the-user-interface-of-the-violin/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2014/08/the-user-interface-of-the-violin/</guid>
      <description>Earlier today, I met a friend for breakfast who’s an outstanding professional UX designer. I was curious about something:
“How do you balance the need to give people a user interface they’re familiar with and can do something with right away, against the opportunity to innovate and do new things that may take more time to learn?”
He gave a beautiful analogy in response.
     “Consider the violin. It has one of the most difficult user interfaces in the world to use. But if you’re willing to put in the thousands of hours of practice, you can make such beautiful music with it. There has to be that trade off. If we demand of our users a steep learning curve, they had better be able to produce some beautiful music.”
I like that idea because I’ve met many designers who get so mesmerized by the idea of doing something new and amazing that they lose sight of the fact that “the tradeoff” has to make sense.</description>
    </item>
    
    <item>
      <title>My Desert Code Camp Presentation on Server Configuration Management with Chef</title>
      <link>https://JoshPadnick.com/2014/04/my-desert-code-camp-presentation-on-server-configuration-management-with-chef/</link>
      <pubDate>Sat, 05 Apr 2014 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2014/04/my-desert-code-camp-presentation-on-server-configuration-management-with-chef/</guid>
      <description>I gave this talk at Desert Code Camp earlier today as part of the DevOps track. It gives an introduction to Chef with a special emphasis on getting you to Hello World and beyond.
They say Chef has a steep learning curve, but I think that’s only because there are a lot of concepts you need to know before you can do the most basic things. I tried to cover most of those concepts here. I also included some best practices I discovered such as how to handle secrets like passwords and certificates using Chef.  </description>
    </item>
    
    <item>
      <title>Checks and Balances in Agile Development</title>
      <link>https://JoshPadnick.com/2013/12/checks-and-balances-in-agile-development/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2013/12/checks-and-balances-in-agile-development/</guid>
      <description>&lt;p&gt;Recently, I worked on a sprint as part of our company’s scrum process.  This sprint was somewhat unusual in that I was the sole developer.  Not only that but I knew most of the specs in my head, so our product manager and I agreed it wasn’t necessary to write acceptance criteria for the user stories I would be working on.  Since I wrote the acceptance criteria, it made sense that I would be the one who ultimately signed off on the user stories.&lt;/p&gt;

&lt;p&gt;I hate bureaucracy so I was excited about how “lightweight” this process for the sprint was.  But I found something kind of interesting.&lt;/p&gt;

&lt;p&gt;When I was wearing my developer hat, I realized how much I enjoyed taking time to learn about other technologies.  I had made a commitment to my teammates to get a certain amount of work done by a certain date, and we came up with estimates to make sure that the work was achievable.&lt;/p&gt;

&lt;p&gt;But once I was doing it, my human nature started subconsciously looking for ways to “cheat”.  I still wanted to get the work done, and done well.  I wanted to be acknowledged by my colleagues for having delivered what was expected with high quality.  But I also wanted to sneak in extra time so I could do more tech learning on the side.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Basic Introduction to Play Framework</title>
      <link>https://JoshPadnick.com/2013/11/basic-introduction-to-play-framework/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 -0700</pubDate>
      
      <guid>https://JoshPadnick.com/2013/11/basic-introduction-to-play-framework/</guid>
      <description>I recently gave a talk at Desert Code Camp 2013.2 on an introduction to Play Framework. I’m just getting started with it, but there are several concepts that got me interested:
 Non-blocking / Evented vs. Threaded Command-line interface to compile, test, and more Clearly inspired by the productivity Ruby on Rails, but written for Java Written using a Functional Programming paradigm Super-easy for creating RESTful web services The devil’s always in the details, of course, but it’s been a blast so far! More to come on Play…    </description>
    </item>
    
  </channel>
</rss>